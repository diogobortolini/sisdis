/* Coleção de Entidades e vão ocorrer eventos com essas entidades 
Sistemas Distribuídos 2022/2 * Simulação com SMPL
Autor: Diogo Bortolini
Data da última atualização: 29/11/2022
Funcionalidade: tempo2.c -> Cada processo correto executa testes até achar outro processo correto. */

#include <stdio.h>
#include <stdlib.h>
#include "smpl.h"

/* vamos definir os eventos */
#define test 1
#define fault 2
#define recovery 3

/* vamos definir um processo, o descritor do processo */

typedef struct {
	int id; //identificador do processo, que é a "entidade" sendo simulada, no SMPL "facility"
	// outras variáveis locais que cada processo mantém são declaradas aqui

} TipoProcesso;

TipoProcesso *processo;

/* Corpo principal do Programa */

int main(int argc, char *argv[]) {
	static int N,    //número de processos do sistema distribuído
			   token,	// indica o processo que está sendo executado
			   event, r, i;
    
    static char fa_name[5];

    if(argc !=2) {
        puts("Uso correto: tempo <número de processos>"); //help do uso correto do programa
        exit(1);
    }

    N = atoi(argv[1]);

    smpl(0, "Um Exemplo de Simulação");
    reset();
    stream(1);

    /* vamos inicializar os processos */

    processo = (TipoProcesso *) malloc(sizeof(TipoProcesso)*N);

    for(i=0; i<N; i++) {
        memset(fa_name, '\0', 5);
        sprintf(fa_name, "%d", i);
        processo[i].id = facility(fa_name, 1);
    }

    /* vamos agora fazer o escalonamento inicial de eventos (teste, falha e recuperação) */

    for(i=0; i<N; i++) schedule(test, 30.0, i);
    schedule(fault, 31.0, 1);
    schedule(recovery, 61.0, 1);

    /* agora vem o loop principal do simulador */

    puts("======================================================================================"); 
    puts("Início da execução: Tarefa 2 - Cada processo correto executa testes até achar outro processo correto.");
    puts("Aluno: Diogo Bortolini - Disciplina Sistemas Distribuídos");
    puts("======================================================================================"); 

    while(time() < 150.0) {
        cause(&event,&token);
        switch(event) {
            case test:
                if(status(processo[token].id) != 0) break; //processo falho, não testa"

		static int proximo; //guarda o próximo processo a ser testado
		static int situacao; //recebe o status do processo
		static char* resultado; //guarda a string da situação do processo

		proximo = (token + 1) % N; //avalia quem é o próximo processo, inclusive sendo 0 (zero) o proximo processo de N-1

		while (token != proximo) {
			situacao = status(processo[proximo].id); //pega o status do próximo nó
			if (situacao == 0) {
				resultado = "Correto"; //se status == 0
				printf("O processo %d testou o processo %d %s no tempo %4.1f\n", token, proximo, resultado,  time());
				schedule(test,30.0, token); 
				break;
			}
			else {
				resultado = "Falho"; //se status == 1
				printf("O processo %d testou o processo %d %s no tempo %4.1f\n", token, proximo, resultado,  time());
				proximo = (proximo +1) % N;
			}
		}
		if (token == proximo) schedule(test, 30.0, token); //Se todos os demais processos estão falhos, permanece testando posteriormente conforme o escalador, se deve parar, então comentar está linha
		break;
            case fault:
                r = request(processo[token].id, token, 0);
                printf("O processo %d falhou no tempo %4.1f\n", token, time());
                break;
            case recovery:
                release(processo[token].id, token);
                printf("O processo %d recuperou no tempo %4.1f\n", token, time());
                schedule(test, 1.0, token);
                break;
        } //switch
    } //while
} //tempo2.c
