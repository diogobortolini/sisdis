/* Coleção de Entidades e vão ocorrer eventos com essas entidades 
Sistemas Distribuídos 2022/2 * Simulação com SMPL
Autor: Diogo Bortolini
Data da última atualização: 30/11/2022
Funcionalidade: tempo4.c -> Quando um processo correto testa outro processo correto obtém as informações do estado dos demais processos do sistema, 
				processos do sistema exceto aqueles que testou nesta rodada, além do próprio testador.  */

#include <stdio.h>
#include <stdlib.h>
#include "smpl.h"

/* vamos definir os eventos */
#define test 1
#define fault 2
#define recovery 3

/* vamos definir um processo, o descritor do processo */

typedef struct {
	int id; //identificador do processo, que é a "entidade" sendo simulada, no SMPL "facility"
	int token;
	int *State; // declara o status local  dos demais processos
	// outras variáveis locais que cada processo mantém são declaradas aqui

} TipoProcesso;

TipoProcesso *processo;

/* Funções Adicionais */

void limpaState(TipoProcesso *processo, int N) { //função para limpar os estados dos processos
	int i;
	for(i=0;i<N;i++)
		processo->State[i] = -1;  //insere -1 para todos os processos
	processo->State[processo->token] = 0; //ajusta para que o estado do próprio processo fique 0 (zero)
}

void  limpaVerificados(int *verificados, int N) { //função para limpar a informação de quais processos já foram testados
	int i=0;
	for(i=0;i<N;i++) {
		verificados[i]=0; // 0 == não testado
	}
}

void printState(TipoProcesso *processo, int N) { //imprime o log com a lista de estados do processos que o testador sabe
	printf("Vetor State do Processo %d => ", processo->token);
	int i;
	for(i=0;i<N;i++)
		printf("%d; ", processo->State[i]);
	printf("\n");
}

/* Corpo principal do Programa */

int main(int argc, char *argv[]) {
	static int N,    //número de processos do sistema distribuído
			   token,	// indica o processo que está sendo executado
			   event, r, i;
    
    static char fa_name[5];

    if(argc !=2) {
        puts("Uso correto: tempo <número de processos>"); //help do uso correto do programa
        exit(1);
    }

    N = atoi(argv[1]);

    smpl(0, "Um Exemplo de Simulação");
    reset();
    stream(1);

    /* vamos inicializar os processos */

    processo = (TipoProcesso *) malloc(sizeof(TipoProcesso)*N);

    for(i=0; i<N; i++) {
        memset(fa_name, '\0', 5);
        sprintf(fa_name, "%d", i);
        processo[i].id = facility(fa_name, 1);

	processo[i].token = i;

	processo[i].State = (int *) malloc(sizeof(int)*N);
	limpaState(&processo[i], N);  //limpa o estado dos processos antes de começar os testes
    }

    int *verificados = (int *) malloc(sizeof(int)*N);
    limpaVerificados(verificados, N);

    /* vamos agora fazer o escalonamento inicial de eventos (teste, falha e recuperação) */

    for(i=0; i<N; i++) schedule(test, 30.0, i);
    schedule(fault, 31.0, 1);
    schedule(recovery, 61.0, 1);

    /* agora vem o loop principal do simulador */

    puts("======================================================================================"); 
    puts("Início da execução: Tarefa 4 - Quando um processo correto testa outro processo correto");
    puts("obtém as informações do estado dos demais processos do sistema, ");
    puts("processos do sistema exceto aqueles que testou nesta rodada, além do próprio testador.");
    puts("Aluno: Diogo Bortolini - Disciplina Sistemas Distribuídos");
    puts("======================================================================================"); 

    while(time() < 150.0) {
        cause(&event,&token);
        switch(event) {
            case test: 
                if(status(processo[token].id) != 0) break; //processo falho, não testa"

		static int proximo; //guarda o próximo processo a ser testado
		static int situacao; //recebe o status do processo
		static char* resultado; //guarda a string da situação do processo

		proximo = (token + 1) % N; //avalia quem é o próximo processo, inclusive sendo 0 (zero) o proximo processo de N-1

		while (token != proximo) {
			situacao = status(processo[proximo].id); //pega o status do próximo nó
			if (situacao == 0) {
				resultado = "Correto"; //se status == 0
				printf("O processo %d testou o processo %d %s no tempo %4.1f\n", token, proximo, resultado,  time());
				processo[token].State[proximo] = situacao;  //atualiza o estado do processo
                                int j;
                                for(j=0;j<N;j++) {  //vai atualizar os status com o processo testado
                                        if(token != j && proximo != j && verificados[j] == 0) { //não pega o status dele mesmo, do que acabou de testar ou de um já testado
                                                int verifica = processo[proximo].State[j];  //recebe os status dos processos do testado
                                                if (verifica != -1) { //só atualiza os que são conhecidos
                                                        processo[token].State[j] = processo[proximo].State[j]; //atualiza os status
                                                }
                                        }
                                }
				schedule(test,30.0, token);
				break;
			}
			else {
				resultado = "Falho"; //se status == 1
				printf("O processo %d testou o processo %d %s no tempo %4.1f\n", token, proximo, resultado,  time());
				processo[token].State[proximo] = situacao; //atualiza o estado do processo
				verificados[proximo] = 1; //atualiza a lista de verificados para não receber informações deste processo do próximo correto
				proximo = (proximo +1) % N;
			}
		}
		printState(&processo[token],N);
		if (token == proximo) schedule(test, 30.0, token); //Se todos os demais processos estão falhos, permanece testando posteriormente conforme o escalador, se deve parar, então comentar está linha
		limpaVerificados(verificados,N);
		break;
            case fault:
                r = request(processo[token].id, token, 0);
                printf("O processo %d falhou no tempo %4.1f\n", token, time());
                break;
            case recovery:
                release(processo[token].id, token);
                printf("O processo %d recuperou no tempo %4.1f\n", token, time());
                schedule(test, 1.0, token);
                break;
        } //switch
    } //while
} //tempo4.c
